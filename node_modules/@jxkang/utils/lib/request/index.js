'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.$getScript = exports.$post = exports.$get = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /* eslint-disable */
/**
 ** @Author: 谭生虎 TanShenghu tanshenghu@163.com
 ** @Update: 2018-05-10
 ** @Description: ajax/fetch/socket/getScript数据请求方法封装   不支持jsonp如果后期有这需求可以添加
 ** 因在request添加cookie, conent-type等字段信息所以只适合熙牛项目
 ** special: intactModel<取整个respnse数据>   customTip<自定义异常提示框>   noHeaders<不带header信息>   cover<默认无,传false不需要loading层>   duration<提示框延迟关闭>
 ** hasFetchLoading=false<项目不需要loading层>
 */


var _common = require('../common');

var _common2 = _interopRequireDefault(_common);

require('./index.styl');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isType = _common2.default.isType;
var G = window;
G.webConfig = G.webConfig || {};
G.fetchingCount;
var fetchingCount = void 0;
var coverElement = null;
// const SPECIALS = ['intactModel', 'customTip', 'noHeaders', 'cover']; // 特殊处理集合
var DATATYPES = ['json', 'text', 'blob', 'arrayBuffer']; // 数据流转换类型


var noop = function noop() {};

var baseUrl = G.localStorage.getItem('ajaxBaseUrl');
var defaultHeaders = {};
var injectResponseCallback = void 0;
var againResCode = '';

var request = function request(options) {
  var _options$url = options.url,
      url = _options$url === undefined ? location.pathname : _options$url,
      _options$type = options.type,
      method = _options$type === undefined ? 'get' : _options$type,
      _options$data = options.data,
      data = _options$data === undefined ? {} : _options$data,
      _options$headers = options.headers,
      headers = _options$headers === undefined ? {} : _options$headers,
      _options$dataType = options.dataType,
      dataType = _options$dataType === undefined ? 'json' : _options$dataType,
      _options$special = options.special,
      special = _options$special === undefined ? {} : _options$special,
      _options$beforeSend = options.beforeSend,
      beforeSend = _options$beforeSend === undefined ? noop : _options$beforeSend,
      _options$success = options.success,
      success = _options$success === undefined ? noop : _options$success,
      _options$error = options.error,
      error = _options$error === undefined ? noop : _options$error,
      _options$complete = options.complete,
      complete = _options$complete === undefined ? noop : _options$complete;


  var isMockDev = G.location.hostname.indexOf('mock.') > -1;
  special.duration = special.duration || 4000;

  dataType = DATATYPES.indexOf(dataType) > -1 ? dataType : 'text';
  if (url.indexOf('//') === -1) {
    if (baseUrl) {
      url = baseUrl + url;
    } else {
      url = location.origin + url;
    }
  }
  method = method.toUpperCase();

  var body = typeof data === 'string' ? data : JSON.stringify(data);
  if (method === 'GET') {
    url += (url.indexOf('?') > 0 ? '&' : '?') + queryString(data);
    url = url.replace(/(?:\?|\&)$/, '');
    body = null;
  }

  var baseHeaders = { Accept: 'application/json' };

  var mixHeaders = _extends({}, defaultHeaders, baseHeaders, method === 'POST' ? { 'Content-Type': 'application/json; charset=UTF-8' } : {}, headers);

  var response = void 0;

  beforeSend();
  if (url.indexOf('//mocks.') > -1) {
    isMockDev = true;
  }
  var isHasCover = special.cover === true || isType(special.cover, 'undefined') && G.webConfig.hasFetchLoading === true;
  if (isHasCover) {
    protectedLayer('begin');
  }

  // 兼容那些不支持 AbortController 的浏览器
  if (!window.AbortController) {
    window.AbortController = function () {
      this.signal = 'error';
      this.abort = function () {};
    };
  }
  // 

  var abortCtl = new AbortController();
  var fetchRes = fetch(new Request(url, {
    method: method,
    headers: isMockDev ? {} : special.noHeaders ? headers : mixHeaders,
    signal: abortCtl.signal,
    credentials: 'omit',
    body: body
  })).then(function (res) {
    response = res;
    // 404 500状态处理
    if (res.ok === false) {
      throw new Error(res.status == 404 ? '系统网络异常,请稍后再试' : '系统繁忙,请稍后再试');
    }
    return res[dataType]();
  }).then(function (res) {
    // 业务事务处理
    if (typeof injectResponseCallback === 'function') {
      injectResponseCallback(res);
    }

    var codeStatus = '' + res.responseCode;

    if (codeStatus !== '0') {
      if (special.customTip !== true) {
        // 自定义弹框提示的情况
        var errMsg = dealErrMsg(res.message) || '系统繁忙,请稍后再试!';

        if (againResCode.indexOf(',' + codeStatus + ',') > -1) {
          // token过期，需要重新登录
          alertMsg(1, errMsg, -1, function () {
            G.location.href = G.webConfig.linkToLogin || '/login';
          });
        } else {
          alertMsg(2, errMsg, special.duration);
        }
      }
    }
    return res;
  }).then(function (res) {
    success(res.body, res, response);
    return isType(res) !== 'Object' && isType(res) !== 'Array' || special.intactModel === true ? res : res.entry;
  }, function (err) {
    error(err, response);
    console.warn('获取接口数据产生异常:', err && err.message);
  }).finally(function (res) {
    if (isHasCover) {
      protectedLayer('done');
    }
    complete(res);
    return res;
  });

  fetchRes.abort = abortCtl.abort.bind(abortCtl);
  return fetchRes;
};

// 如果有一些自定义提示框 想获取整个response数据情况最好走ajax方法
var $ajax = function $ajax(options) {
  return request(options);
};

// 供代码开发阶段调试所用
$ajax.setBaseUrl = function (ajaxBaseUrl) {
  var cacheBaseUrl = G.localStorage.getItem('ajaxBaseUrl');
  ajaxBaseUrl = cacheBaseUrl || ajaxBaseUrl;
  if (ajaxBaseUrl && typeof ajaxBaseUrl === 'string') {
    baseUrl = ajaxBaseUrl.indexOf('//') === -1 ? '//' + ajaxBaseUrl : ajaxBaseUrl;
  }
};

// 供代码开发阶段调试所用
$ajax.getBaseUrl = function () {
  var earnest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  return earnest ? baseUrl || location.protocol + '//' + location.host : baseUrl;
};

// 注入项目公用headers
$ajax.injectHeaders = function (headers) {
  if (isType(headers, 'object')) {
    defaultHeaders = Object.assign({}, defaultHeaders, headers);
  }
};
$ajax.uninjectHeaders = function () {
  defaultHeaders = {};
};
/**
 * 注入共性事务处理方法 偏业务类型
 */
$ajax.injectResponse = function (callback) {
  if (typeof callback === 'function') {
    injectResponseCallback = callback;
  }
};
/**
 * 注入异常错误编码
 */
$ajax.injectErrCode = function () {
  var codes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  againResCode = !Array.isArray(codes) || codes.length === 0 ? '' : ',' + codes.toString() + ',';
};

/**
 * 加载远程CSS,JS资源文件
 * @param {String | Array} attachSrc js或者css服务端或cdn远程地址
 * @param {Function} cb 加载成功之后回调
 * @param {Boolean} remove 是否移除
 */
var $getScript = function $getScript(attachSrc) {
  var cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
  var remove = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

  var doc = G.document;
  var ohead = doc.documentElement.firstElementChild || doc.getElementsByTagName('head')[0];
  var inspect = function inspect(type, src) {
    // 不考虑低版本浏览 提高性能就不用for循环了
    return doc.querySelector(type === 'script' ? 'script[src="' + src + '"]' : 'link[href="' + src + '"]') === null;
  };
  var addAttach = function addAttach(src) {
    var type = /\.js$|\.js\?/.test(src) ? 'script' : /\.css$|\.css\?/.test(src) ? 'link' : null;
    if (!type) {
      throw new Error('请传入js或者css地址');
    }
    if (!inspect(type, src)) {
      console.log('已经查检到之前有添加过该文件', type, src);
      return false;
    }
    var os = doc.createElement(type);
    if (type === 'script') {
      os.onload = function () {
        cb();
        remove === true && ohead.removeChild(os);
      };
      os.async = true;
      os.src = src;
      ohead.appendChild(os);
    } else {
      os.setAttribute('rel', 'stylesheet');
      os.href = src;
      ohead.insertBefore(os, ohead.getElementsByTagName('title')[0]);
    }
  };

  if (Array.isArray(attachSrc)) {
    attachSrc.forEach(function (srcUrl) {
      addAttach(srcUrl);
    });
  } else if (typeof attachSrc === 'string') {
    addAttach(attachSrc);
  } else {
    throw new Error('传入的参数类型不正确!');
  }
};

function queryString(params) {
  if (G.URLSearchParams) {
    return new G.URLSearchParams(params).toString();
  }

  var result = '';
  var encode = function encode(v) {
    return typeof v === 'string' ? v.replace(/\&/gm, '%26').replace(/\?/gm, '%3F') : v;
  };
  Object.keys(params).forEach(function (v) {
    result += '&' + v + '=' + encode(params[v]);
  });
  return result.slice(1);
}

// 弹框提示
var alertMsg = function alertMsg(type, msg, duration) {
  var cb = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : noop;
  // type 1, 2
  var popup = G.document.getElementById(type === 1 ? 'fetch-msg-tip' : 'fetch-err-tip');
  var callfn = function callfn() {
    if (popup) {
      var delay = 0;
      if (type === 2) {
        popup.className = popup.className.replace('bounce', 'zoomOut');
        delay = 820;
      }
      setTimeout(function () {
        if (popup) {
          G.document.body.removeChild(popup);
        }
      }, delay);
    }
    cb();
  };
  if (!popup) {
    popup = G.document.createElement('div');
    popup.id = type === 1 ? 'fetch-msg-tip' : 'fetch-err-tip';
    G.document.body.appendChild(popup);
    if (type === 1) {
      popup.innerHTML = '<div class="popup-box"><div class="dialog-title">\u7CFB\u7EDF\u6E29\u99A8\u63D0\u793A</div><div class="dialog-content">' + msg + '</div><div class="dialog-handler"><button onclick="document.getElementById(\'fetch-msg-tip\').ecb()">\u786E\u5B9A</button></div></div>';
    } else {
      popup.className = (popup.className || '') + 'animated bounce';
      popup.innerHTML = '<div class="popup-box"><div class="dialog-title"><a href="javascript:;" class="close-btn" onclick="document.getElementById(\'fetch-err-tip\').ecb()">&times;</a></div><div class="dialog-content"><i class="icon-shibai"><svg viewBox="64 64 896 896" focusable="false" class="" data-icon="exclamation-circle" width="35px" height="35px" fill="#f1993b" aria-hidden="true"><path d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"></path><path d="M464 688a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm24-112h48c4.4 0 8-3.6 8-8V296c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8z"></path></svg></i><div class="content-text">' + msg + '</div></div></div>';
      // popup.style.width = Math.min(popup.querySelector('.content-text').offsetWidth+90,234+90)+'px';
      popup.style.height = Math.max(popup.querySelector('.dialog-content').offsetHeight + 38, 75) + 'px';
      duration > 0 && setTimeout(function () {
        callfn();
      }, 4000); // 自动关闭
    }
    popup.ecb = callfn;
  } else {
    var msgTipPop = G.document.querySelector('#fetch-msg-tip .dialog-content');
    if (msgTipPop) {
      msgTipPop.innerHTML = msg;
      popup.ecb = callfn;
    }
  }
};

// 对error message各种错误格式的兼容处理
var dealErrMsg = function dealErrMsg(msg) {
  if (!msg) {
    return msg;
  }
  if (typeof msg === 'string' && msg.indexOf('[') === 0) {
    msg = JSON.parse(msg);
  }
  if (Array.isArray(msg)) {
    if (isType(msg[0], 'string') && msg[0].indexOf('{') === 0 && msg[0].lastIndexOf('}') === msg[0].length - 1) {
      msg = msg.map(function (err) {
        return JSON.parse(err);
      });
    }
    if (isType(msg[0], 'object') && msg[0].value) {
      msg = msg.map(function (err, index) {
        return msg.length === 1 ? err.value : index + 1 + '\u3001' + err.value;
      }).join(' ');
    } else {
      msg = msg.map(function (err, index) {
        return msg.length === 1 ? err : index + 1 + '\u3001' + err;
      }).join(' ');
    }
  }
  return msg;
};

// 数据请求之前 加蒙板处理
var protectedLayerTimer1 = null;
var protectedLayerTimer2 = null;
var protectedLayer = function protectedLayer(actionType) {
  fetchingCount = fetchingCount || 0;
  G.fetchingCount = G.fetchingCount || 0;

  var addCover = function addCover() {
    if (coverElement) {
      return false;
    }
    coverElement = G.document.createElement('div');
    coverElement.id = 'fetch-loading-cover';
    if (!G.document.getElementById('fetch-loading-cover')) {
      G.document.body.appendChild(coverElement);
    }
    clearTimeout(protectedLayerTimer1);
    protectedLayerTimer1 = setTimeout(function () {
      if (coverElement) {
        coverElement.className = (coverElement.className || '') + 'runAnt';
      }
    }, 500);
  };

  var removeCover = function removeCover() {
    if (fetchingCount < 1 && coverElement) {
      coverElement.className = '';
      clearTimeout(protectedLayerTimer2);
      protectedLayerTimer2 = setTimeout(function () {
        if (fetchingCount < 1 && coverElement && G.document.getElementById('fetch-loading-cover')) {
          G.document.body.removeChild(coverElement);
          coverElement = null;
        }
      }, 700);
    }
  };

  if (actionType === 'begin') {
    fetchingCount++;
    G.fetchingCount++;
    addCover();
  } else if (actionType === 'done') {
    fetchingCount--;
    G.fetchingCount--;
    removeCover();
  }
};

exports.default = $ajax;

/**
 * 接口GET调用方式
 * @param {String} url 接口地址
 * @param {Object} params 接口参数
 * @param {Function} callback 接口调用成功回调
 * @param {String} dataType 响应数据类型
 */

var $get = exports.$get = function $get(url, params, callback, dataType) {
  if (isType(params, 'function')) {
    callback = params;params = {};
  }
  if (isType(params, 'string') && DATATYPES.indexOf(params) > -1) {
    dataType = params;params = {};
  }
  if (isType(callback, 'string') && DATATYPES.indexOf(callback) > -1) {
    dataType = callback;callback = undefined;
  }

  return request({ url: url, data: params, dataType: dataType, success: callback });
};

/**
 * 接口POST调用方式
 * @param {String} url 接口地址
 * @param {Object} params 接口参数
 * @param {Function} callback 接口调用成功回调
 * @param {String} dataType 响应数据类型
 */
var $post = exports.$post = function $post(url, params, callback, dataType) {
  if (isType(params, 'function')) {
    callback = params;params = {};
  }
  if (isType(params, 'string') && DATATYPES.indexOf(params) > -1) {
    dataType = params;params = {};
  }
  if (isType(callback, 'string') && DATATYPES.indexOf(callback) > -1) {
    dataType = callback;callback = undefined;
  }

  return request({ url: url, data: params, type: 'post', dataType: dataType, success: callback });
};

exports.$getScript = $getScript;