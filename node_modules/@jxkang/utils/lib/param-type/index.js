'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _common = require('../common');

var _common2 = _interopRequireDefault(_common);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// 全局自定义规则
var ruleUtils = {};
// 临时自定规则 用完即毁   临时规则优先于全局规则
/**
 * @Author: 谭生虎 TanShenghu tanshenghu@163.com
 * @Update: 2020-03-20
 * @Description: 参数数据类型验证 主要运用于移动端与NodeJs项目中   后期优化点: 递归深入到每一个节点进行相应的数据类型验证
 */
var temporaryRuleUtils = {};

function paramType(parameter, rules, Tip) {
  function getRuleKeys(rule) {
    return Object.keys(rule);
  }

  var verifTools = {
    value: null,
    // 必填项
    required: function required(value) {
      this.value = value;
      return !!value && value !== 0;
    },

    // 非Null或undefined
    notNull: function notNull(value) {
      this.value = value;
      return value !== null && typeof value !== 'undefined';
    },

    // 自定义项
    custom: function custom(value, callback) {
      return callback(value, _common2.default.extend({}, ruleUtils, temporaryRuleUtils));
    },

    // 字符长度
    length: function length(value, _ref) {
      var _ref$min = _ref.min,
          min = _ref$min === undefined ? 0 : _ref$min,
          max = _ref.max;

      return typeof value === 'string' && value.length >= min && (!max || value.length <= max);
    },

    // 值在某个集合范围内
    among: function among(value, sets) {
      this.value = value;
      return sets.includes(value);
    },

    // 字符类型
    string: function string(value) {
      this.value = value;
      return value.constructor === String;
    },

    // 数字类型
    number: function number(value) {
      this.value = value;
      return value.constructor === Number;
    },

    // 对象类型
    object: function object(value) {
      this.value = value;
      return value.constructor === Object;
    },

    // 函数类型
    function: function _function(value) {
      this.value = value;
      return value.constructor === Function;
    },

    // 数组类型
    array: function array(value) {
      this.value = value;
      return value.constructor === Array;
    },

    // 日期类型
    date: function date(value) {
      this.value = value;
      return value.constructor === Date;
    },

    // 布尔类型
    boolean: function boolean(value) {
      this.value = value;
      return value.constructor === Boolean;
    }
  };

  var currentLoopRule = {};

  var fields = getRuleKeys(rules);
  var checkResult = fields.every(function (item) {
    var currentFieldsRules = [].concat(Object.keys(rules[item].rule));
    var result = currentFieldsRules.every(function (rItem) {
      // 首字母小写
      rItem = ('' + rItem).replace(/./, function (a) {
        return a.toLowerCase();
      });

      if (verifTools[rItem]) {
        currentLoopRule.name = rItem;
        currentLoopRule.message = rules[item].message[rItem] || item + ',' + rItem + ' \u9A8C\u8BC1\u5931\u8D25';

        var applys = void 0;
        if (rItem === 'custom' || rItem === 'length' || rItem === 'among') {
          applys = rules[item].rule[rItem];
        }
        return verifTools[rItem](parameter[item], applys);
      }
      return true;
    });
    return result;
  });

  if (typeof Tip === 'function' && !checkResult) {
    Tip(currentLoopRule.message, currentLoopRule);
  }

  // 临时验证规则 生命周期结束
  temporaryRuleUtils = {};
  return checkResult;
}

/**
 * 辅助工具方法
 */
paramType.chain = function () {
  var result = {};
  var node = result;
  var nodeSelector = 'result';
  var toLower = function toLower(v) {
    return ('' + v).toLowerCase();
  };

  return {
    add: function add(fieldName) {
      result[fieldName] = result[fieldName] || {};
      node = result[fieldName];
      nodeSelector += '.' + fieldName;
      return this;
    },
    rule: function rule(ruleName, _rule, message) {
      // 数据类型 简写规则支持
      if (!_common2.default.isType(_rule, 'function')) {
        var itemRule = _common2.default.seek().equal(toLower(ruleName) === 'string', String).equal(toLower(ruleName) === 'number', Number).equal(toLower(ruleName) === 'object', Object).equal(toLower(ruleName) === 'function', Function).equal(toLower(ruleName) === 'array', Array).equal(toLower(ruleName) === 'date', Date).equal(toLower(ruleName) === 'boolean', Boolean).get();
        if (itemRule) {
          message = _rule;
          _rule = itemRule;
        }
      }

      node.rule = node.rule || {};
      node.message = node.message || {};
      node.rule[ruleName] = _rule;
      if (message) {
        node.message[ruleName] = message;
      }
      return this;
    },
    end: function end() {
      node = result;
      nodeSelector = nodeSelector.replace(/.[\w\-]+$/, '');
      return this;
    },
    injectRules: function injectRules(iRuleUtils) {
      if (_common2.default.isType(iRuleUtils, 'object')) {
        temporaryRuleUtils = iRuleUtils;
      }
      return this;
    },
    toConfig: function toConfig() {
      return result;
    }
  };
};

/**
 * 注入一些常用的验证规则
 */
paramType.injectRules = function (rules) {
  if (_common2.default.isType(rules, 'object')) {
    _common2.default.extend(ruleUtils, rules);
  }
};

exports.default = paramType;
module.exports = exports['default'];