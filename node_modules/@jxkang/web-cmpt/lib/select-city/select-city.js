'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _select = require('antd/lib/select');

var _select2 = _interopRequireDefault(_select);

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /**
uthor: 谭生虎 TanShenghu tanshenghu@163.com
pdate: 2019-12-17
escription: 行政区划选择组件



require('antd/lib/select/style');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _utils = require('@jxkang/utils');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _style = require('./style');

var _style2 = _interopRequireDefault(_style);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var noop = function noop() {};
var fetchUrl = function fetchUrl(reqModel) {
  return (0, _utils.$post)('/productservice/sys/getAreaList', reqModel);
};

var SelectCity = function SelectCity(_ref) {
  var _ref$url = _ref.url,
      url = _ref$url === undefined ? fetchUrl : _ref$url,
      className = _ref.className,
      provinceClassName = _ref.provinceClassName,
      cityClassName = _ref.cityClassName,
      countyClassName = _ref.countyClassName,
      leafKeyName = _ref.leafKeyName,
      _ref$onChange = _ref.onChange,
      onChange = _ref$onChange === undefined ? noop : _ref$onChange,
      value = _ref.value,
      _ref$width = _ref.width,
      width = _ref$width === undefined ? [115, 115, 115] : _ref$width,
      _ref$onOk = _ref.onOk,
      onOk = _ref$onOk === undefined ? noop : _ref$onOk,
      _ref$onRef = _ref.onRef,
      onRef = _ref$onRef === undefined ? noop : _ref$onRef,
      _ref$placeholder = _ref.placeholder,
      placeholder = _ref$placeholder === undefined ? ['省份', '地市', '区县'] : _ref$placeholder,
      onlyCity = _ref.onlyCity;

  var _useState = (0, _react.useState)([[], [], []]),
      _useState2 = _slicedToArray(_useState, 2),
      datas = _useState2[0],
      setDatas = _useState2[1];

  var _useState3 = (0, _react.useState)([]),
      _useState4 = _slicedToArray(_useState3, 2),
      selected = _useState4[0],
      setSelected = _useState4[1];

  var _useState5 = (0, _react.useState)(value || []),
      _useState6 = _slicedToArray(_useState5, 2),
      selectedId = _useState6[0],
      setSelectedId = _useState6[1];

  (0, _react.useEffect)(function () {
    getData({ parentCode: 0, level: 0 });
    /**
     * 受控情况
     */
    if (Array.isArray(value) && value.length) {
      value.forEach(function (item, index) {
        if (index < 2) {
          getData({ parentCode: item, level: index + 1 });
        }
      });
    }
  }, []);

  /**
   * 调用接口查行政区划 // parentCode
   * level: 0(0:省；1:市；2:区)
   */
  var getData = function getData(_ref2) {
    var parentCode = _ref2.parentCode,
        level = _ref2.level;

    url({ parentCode: parentCode }).then(function (resModel) {
      if (resModel) {
        var activeDatas = Array.isArray(resModel) ? resModel : resModel.records;
        datas[level] = activeDatas;
        setDatas([].concat(_toConsumableArray(datas)));
      }
    });
  };

  /**
   * 切换城市
   */
  var onChangeCity = function onChangeCity(id, level) {
    // 如果有叶子节点，优先用叶子节点作为判断依据，否则只能通过层级判断
    var lineData = datas[level].find(function (v) {
      return v.areaCode === id;
    });
    onChange(lineData, level, datas);
    selected[level] = lineData;
    selectedId[level] = id;
    // 清空操作
    [0, 1, 2].filter(function (v) {
      return v > level;
    }).forEach(function (item) {
      datas[item] = [];
      selectedId[item] = undefined;
    });
    //
    setSelected(selected);
    setSelectedId([].concat(_toConsumableArray(selectedId)));

    if (leafKeyName) {
      if (lineData[leafKeyName]) {
        onOk(selected, selectedId);
      } else {
        getData({ parentCode: lineData.areaCode, level: level + 1 });
      }
    } else if (level === 2 || onlyCity && level === 1) {
      onOk(selected, selectedId);
    } else {
      getData({ parentCode: lineData.areaCode, level: level + 1 });
    }
  };

  onRef({
    forceUpdate: function forceUpdate() {
      if (Array.isArray(value) && value.length) {
        setSelectedId(value);
        value.forEach(function (item, index) {
          if (index < 2) {
            getData({ parentCode: item, level: index + 1 });
          }
        });
      }
    }
  });

  return _react2.default.createElement(
    'section',
    { className: className },
    _react2.default.createElement(
      _select2.default,
      { value: selectedId[0], placeholder: placeholder[0], style: { width: width[0] }, className: (0, _classnames2.default)(_style2.default.province, provinceClassName), onChange: function onChange(v) {
          return onChangeCity(v, 0);
        } },
      Array.isArray(datas[0]) && datas[0].map(function (item, index) {
        return _react2.default.createElement(
          _select2.default.Option,
          { key: index, value: item.areaCode },
          item.areaName
        );
      })
    ),
    _react2.default.createElement(
      _select2.default,
      { value: selectedId[1], placeholder: placeholder[1], style: { width: width[1] }, className: (0, _classnames2.default)(_style2.default.city, cityClassName), onChange: function onChange(v) {
          return onChangeCity(v, 1);
        } },
      Array.isArray(datas[1]) && datas[1].map(function (item, index) {
        return _react2.default.createElement(
          _select2.default.Option,
          { key: index, value: item.areaCode },
          item.areaName
        );
      })
    ),
    onlyCity ? null : _react2.default.createElement(
      _select2.default,
      { value: selectedId[2], placeholder: placeholder[2], style: { width: width[2] }, className: (0, _classnames2.default)(_style2.default.county, countyClassName), onChange: function onChange(v) {
          return onChangeCity(v, 2);
        } },
      Array.isArray(datas[2]) && datas[2].map(function (item, index) {
        return _react2.default.createElement(
          _select2.default.Option,
          { key: index, value: item.areaCode },
          item.areaName
        );
      })
    )
  );
};

/**
 * 通过指定id 查找中文名称
 */
SelectCity.idToLabel = function (_ref3) {
  var value = _ref3.value,
      _ref3$params = _ref3.params,
      params = _ref3$params === undefined ? {} : _ref3$params,
      _ref3$ofetch = _ref3.ofetch,
      ofetch = _ref3$ofetch === undefined ? fetchUrl : _ref3$ofetch,
      _ref3$callback = _ref3.callback,
      callback = _ref3$callback === undefined ? noop : _ref3$callback;

  if (Array.isArray(value)) {
    return Promise.all(value.map(function (v, i) {
      return ofetch(Object.assign(i === 0 ? { parentCode: 0 } : { parentCode: value[i - 1] }, params));
    })).then(function (resModel) {
      if (resModel && resModel.every(function (ditem) {
        return ditem;
      })) {
        var vals = value.map(function (item, idx) {
          return resModel[idx].records.find(function (vv) {
            return vv.areaCode === item;
          });
        });
        callback(vals);
      }
      return resModel;
    });
  }
};

exports.default = SelectCity;
module.exports = exports['default'];