"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _propTypes = _interopRequireDefault(require("prop-types"));

/* eslint react/require-default-props:0, react/no-unused-prop-types:0, react/no-find-dom-node:0 */
var defaultSetFieldValue = function defaultSetFieldValue() {
  return arguments.length <= 0 ? undefined : arguments[0];
};

var defaultGetFieldValue = function defaultGetFieldValue(value) {
  return value;
};

var FormBinder =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(FormBinder, _Component);

  function FormBinder() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, FormBinder);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(FormBinder)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.rules = [];

    _this.getRules = function (props) {
      // rules 优先级最高
      if (props.rules && Array.isArray(props.rules)) {
        return props.rules;
      }

      var rules = []; // [{required: true, max: 10, ...}]

      var ruleKeys = ['required', 'pattern', 'min', 'max', 'len', 'enum', 'whitespace', 'fields', 'transform', 'message', 'validator', 'type', 'range'];
      ruleKeys.forEach(function (ruleKey) {
        var ruleValue;

        if (ruleKey in props) {
          ruleValue = props[ruleKey];
        }

        if (ruleValue !== undefined && ruleValue !== null) {
          if (rules[0]) {
            rules[0][ruleKey] = ruleValue;
          } else {
            rules.push((0, _defineProperty2.default)({}, ruleKey, ruleValue));
          }
        }
      });
      return rules;
    };

    return _this;
  }

  (0, _createClass2.default)(FormBinder, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.rules = this.getRules(this.props);

      if (this.rules.length) {
        this.context.addValidate(this.props.name, this.rules, _reactDom.default.findDOMNode(this));
      }
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var nextRules = this.getRules(nextProps);

      if (nextRules.length > 0 && JSON.stringify(nextRules) !== JSON.stringify(this.rules)) {
        this.rules = nextRules;
        this.context.addValidate(this.props.name, this.rules, _reactDom.default.findDOMNode(this));
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.rules = this.getRules(this.props);

      if (this.rules.length) {
        this.context.removeValidate(this.props.name);
      }
    }
    /**
     * 从 FormBinder 收集表单的校验规则
     */

  }, {
    key: "render",
    value: function render() {
      var _this2 = this,
          _React$cloneElement;

      var FormItem = _react.default.Children.only(this.props.children);

      var FormItemProps = FormItem.props;
      var name = this.props.name; // 提供受控属性 value 或其它与 valuePropName 的值同名的属性，如 Switch 的是 'checked'

      var valuePropName = this.props.valuePropName || 'value'; // 自定义验证触发时机

      var validateTriggerType = this.props.triggerType || 'onChange'; // 设置单个表单域的值

      var setFieldValue = this.props.setFieldValue || defaultSetFieldValue; // 获取单个表单域的值

      var getFieldValue = this.props.getFieldValue || defaultGetFieldValue;

      var NewFormItem = _react.default.cloneElement(FormItem, (_React$cloneElement = {}, (0, _defineProperty2.default)(_React$cloneElement, valuePropName, function () {
        var value = _this2.context.getter(name);

        return setFieldValue(value);
      }()), (0, _defineProperty2.default)(_React$cloneElement, validateTriggerType, function () {
        if (_this2.rules.length > 0) {
          _this2.context.validate(name, _this2.rules);
        }
      }), (0, _defineProperty2.default)(_React$cloneElement, "onChange", function onChange() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        if (FormItemProps.onChange) {
          FormItemProps.onChange.apply(_this2, args);
        }

        var newValue = getFieldValue.apply(void 0, args);

        _this2.context.setter(name, newValue);

        if (validateTriggerType === 'onChange' && _this2.rules.length > 0) {
          _this2.context.validate(name, _this2.rules);
        }
      }), _React$cloneElement));

      return NewFormItem;
    }
  }]);
  return FormBinder;
}(_react.Component);

exports.default = FormBinder;
FormBinder.displayName = 'FormBinder';
FormBinder.propTypes = {
  /**
   * 当前表单绑定的数据层级
   */
  name: _propTypes.default.string,

  /**
   * 数据格式化方法，表单组件 onChange 之后，支持对数据做一层转换再进行后续操作
   */
  setFieldValue: _propTypes.default.func,

  /**
   * 数据转换方法，表单组件接收值时可将其转换为其他类型
   */
  getFieldValue: _propTypes.default.func,

  /**
   * 触发校验的事件，对于高频触发校验的 Input 可以设置为 'onBlur' 减少校验调用次数
   */
  triggerType: _propTypes.default.string,

  /**
   * value 属性的 key, 默认 `value`
   */
  valuePropName: _propTypes.default.string,

  /**
   * 数组的方式配置当前表单校验规则，用于对一个表单执行多条校验规则
   */
  rules: _propTypes.default.array,
  // 校验相关：async-validate 支持的属性

  /**
   * 当前表单项是否必须有值
   */
  required: _propTypes.default.bool,

  /**
   * 当前表单值正则表单校验
   */
  pattern: _propTypes.default.object,

  /**
   * 当前表单值最小数（对字符串、数组、数值类型数据有效）
   */
  min: _propTypes.default.number,

  /**
   * 当前表单值最大数（对字符串、数组、数值类型数据有效）
   */
  max: _propTypes.default.number,

  /**
   * 当前表单值固定长度（对字符串、数组、数值类型数据有效）
   */
  len: _propTypes.default.number,

  /**
   * 当前表单值枚举值
   */
  enum: _propTypes.default.array,

  /**
   * 当前表单值是否允许纯空格（对字符串类型有效）
   */
  whitespace: _propTypes.default.bool,

  /**
   * 声明当前表单项下层表单数据校验规则
   */
  fields: _propTypes.default.object,

  /**
   * 当前表单值校验前的自定义数据转换方法
   */
  transform: _propTypes.default.func,

  /**
   * 当前表单校验规则失败时的提示文案
   */
  message: _propTypes.default.node,

  /**
   * 自定义表单校验方法，支持异步请求等校验
   */
  validator: _propTypes.default.func,

  /**
   * 当前表单值的数据类型，支持配置 string、number、boolean、method、regexp、integer、float、array、object、enum、date、url、hex、email
   */
  type: _propTypes.default.string
};
FormBinder.defaultProps = {};
FormBinder.contextTypes = {
  setter: _propTypes.default.func,
  getter: _propTypes.default.func,
  validate: _propTypes.default.func,
  addValidate: _propTypes.default.func,
  removeValidate: _propTypes.default.func,
  getError: _propTypes.default.func
};